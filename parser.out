Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> result
Rule 1     result -> expression
Rule 2     result -> if_statement
Rule 3     result -> print
Rule 4     result -> empty
Rule 5     result -> ID EQUAL expression
Rule 6     expression -> INT
Rule 7     expression -> FLOAT
Rule 8     expression -> NAME
Rule 9     expression -> LNAME
Rule 10    expression -> ID
Rule 11    expression -> expression TIMES expression
Rule 12    expression -> expression DIVIDE expression
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    print -> PRINT LPAREN expression RPAREN
Rule 16    if_statement -> RANKED compare THEN expression
Rule 17    if_statement -> RANKED compare THEN print
Rule 18    compare -> expression EQUALS expression
Rule 19    compare -> expression NOTEQUALS expression
Rule 20    compare -> expression BIGGER expression
Rule 21    compare -> expression BIGGEROR expression
Rule 22    compare -> expression SMALLER expression
Rule 23    compare -> expression SMALLEROR expression
Rule 24    expression -> LPAREN expression RPAREN
Rule 25    empty -> <empty>

Terminals, with rules where they appear

BIGGER               : 20
BIGGEROR             : 21
DIVIDE               : 12
EQUAL                : 5
EQUALS               : 18
FLOAT                : 7
ID                   : 5 10
INT                  : 6
LNAME                : 9
LPAREN               : 15 24
MINUS                : 14
NAME                 : 8
NOTEQUALS            : 19
PLUS                 : 13
PRINT                : 15
RANKED               : 16 17
RPAREN               : 15 24
SMALLER              : 22
SMALLEROR            : 23
THEN                 : 16 17
TIMES                : 11
error                : 

Nonterminals, with rules where they appear

compare              : 16 17
empty                : 4
expression           : 1 5 11 11 12 12 13 13 14 14 15 16 18 18 19 19 20 20 21 21 22 22 23 23 24
if_statement         : 2
print                : 3 17
result               : 0

Parsing method: LALR

state 0

    (0) S' -> . result
    (1) result -> . expression
    (2) result -> . if_statement
    (3) result -> . print
    (4) result -> . empty
    (5) result -> . ID EQUAL expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (16) if_statement -> . RANKED compare THEN expression
    (17) if_statement -> . RANKED compare THEN print
    (15) print -> . PRINT LPAREN expression RPAREN
    (25) empty -> .

    ID              shift and go to state 6
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    LPAREN          shift and go to state 11
    RANKED          shift and go to state 12
    PRINT           shift and go to state 13
    $end            reduce using rule 25 (empty -> .)

    result                         shift and go to state 1
    expression                     shift and go to state 2
    if_statement                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> result .



state 2

    (1) result -> expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    $end            reduce using rule 1 (result -> expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 3

    (2) result -> if_statement .

    $end            reduce using rule 2 (result -> if_statement .)


state 4

    (3) result -> print .

    $end            reduce using rule 3 (result -> print .)


state 5

    (4) result -> empty .

    $end            reduce using rule 4 (result -> empty .)


state 6

    (5) result -> ID . EQUAL expression
    (10) expression -> ID .

    EQUAL           shift and go to state 18
    TIMES           reduce using rule 10 (expression -> ID .)
    DIVIDE          reduce using rule 10 (expression -> ID .)
    PLUS            reduce using rule 10 (expression -> ID .)
    MINUS           reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)


state 7

    (6) expression -> INT .

    TIMES           reduce using rule 6 (expression -> INT .)
    DIVIDE          reduce using rule 6 (expression -> INT .)
    PLUS            reduce using rule 6 (expression -> INT .)
    MINUS           reduce using rule 6 (expression -> INT .)
    $end            reduce using rule 6 (expression -> INT .)
    RPAREN          reduce using rule 6 (expression -> INT .)
    EQUALS          reduce using rule 6 (expression -> INT .)
    NOTEQUALS       reduce using rule 6 (expression -> INT .)
    BIGGER          reduce using rule 6 (expression -> INT .)
    BIGGEROR        reduce using rule 6 (expression -> INT .)
    SMALLER         reduce using rule 6 (expression -> INT .)
    SMALLEROR       reduce using rule 6 (expression -> INT .)
    THEN            reduce using rule 6 (expression -> INT .)


state 8

    (7) expression -> FLOAT .

    TIMES           reduce using rule 7 (expression -> FLOAT .)
    DIVIDE          reduce using rule 7 (expression -> FLOAT .)
    PLUS            reduce using rule 7 (expression -> FLOAT .)
    MINUS           reduce using rule 7 (expression -> FLOAT .)
    $end            reduce using rule 7 (expression -> FLOAT .)
    RPAREN          reduce using rule 7 (expression -> FLOAT .)
    EQUALS          reduce using rule 7 (expression -> FLOAT .)
    NOTEQUALS       reduce using rule 7 (expression -> FLOAT .)
    BIGGER          reduce using rule 7 (expression -> FLOAT .)
    BIGGEROR        reduce using rule 7 (expression -> FLOAT .)
    SMALLER         reduce using rule 7 (expression -> FLOAT .)
    SMALLEROR       reduce using rule 7 (expression -> FLOAT .)
    THEN            reduce using rule 7 (expression -> FLOAT .)


state 9

    (8) expression -> NAME .

    TIMES           reduce using rule 8 (expression -> NAME .)
    DIVIDE          reduce using rule 8 (expression -> NAME .)
    PLUS            reduce using rule 8 (expression -> NAME .)
    MINUS           reduce using rule 8 (expression -> NAME .)
    $end            reduce using rule 8 (expression -> NAME .)
    RPAREN          reduce using rule 8 (expression -> NAME .)
    EQUALS          reduce using rule 8 (expression -> NAME .)
    NOTEQUALS       reduce using rule 8 (expression -> NAME .)
    BIGGER          reduce using rule 8 (expression -> NAME .)
    BIGGEROR        reduce using rule 8 (expression -> NAME .)
    SMALLER         reduce using rule 8 (expression -> NAME .)
    SMALLEROR       reduce using rule 8 (expression -> NAME .)
    THEN            reduce using rule 8 (expression -> NAME .)


state 10

    (9) expression -> LNAME .

    TIMES           reduce using rule 9 (expression -> LNAME .)
    DIVIDE          reduce using rule 9 (expression -> LNAME .)
    PLUS            reduce using rule 9 (expression -> LNAME .)
    MINUS           reduce using rule 9 (expression -> LNAME .)
    $end            reduce using rule 9 (expression -> LNAME .)
    RPAREN          reduce using rule 9 (expression -> LNAME .)
    EQUALS          reduce using rule 9 (expression -> LNAME .)
    NOTEQUALS       reduce using rule 9 (expression -> LNAME .)
    BIGGER          reduce using rule 9 (expression -> LNAME .)
    BIGGEROR        reduce using rule 9 (expression -> LNAME .)
    SMALLER         reduce using rule 9 (expression -> LNAME .)
    SMALLEROR       reduce using rule 9 (expression -> LNAME .)
    THEN            reduce using rule 9 (expression -> LNAME .)


state 11

    (24) expression -> LPAREN . expression RPAREN
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 19

state 12

    (16) if_statement -> RANKED . compare THEN expression
    (17) if_statement -> RANKED . compare THEN print
    (18) compare -> . expression EQUALS expression
    (19) compare -> . expression NOTEQUALS expression
    (20) compare -> . expression BIGGER expression
    (21) compare -> . expression BIGGEROR expression
    (22) compare -> . expression SMALLER expression
    (23) compare -> . expression SMALLEROR expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    compare                        shift and go to state 21
    expression                     shift and go to state 22

state 13

    (15) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 23


state 14

    (11) expression -> expression TIMES . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 24

state 15

    (12) expression -> expression DIVIDE . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 25

state 16

    (13) expression -> expression PLUS . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 26

state 17

    (14) expression -> expression MINUS . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 27

state 18

    (5) result -> ID EQUAL . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 28

state 19

    (24) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    RPAREN          shift and go to state 29
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 20

    (10) expression -> ID .

    RPAREN          reduce using rule 10 (expression -> ID .)
    TIMES           reduce using rule 10 (expression -> ID .)
    DIVIDE          reduce using rule 10 (expression -> ID .)
    PLUS            reduce using rule 10 (expression -> ID .)
    MINUS           reduce using rule 10 (expression -> ID .)
    EQUALS          reduce using rule 10 (expression -> ID .)
    NOTEQUALS       reduce using rule 10 (expression -> ID .)
    BIGGER          reduce using rule 10 (expression -> ID .)
    BIGGEROR        reduce using rule 10 (expression -> ID .)
    SMALLER         reduce using rule 10 (expression -> ID .)
    SMALLEROR       reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)
    THEN            reduce using rule 10 (expression -> ID .)


state 21

    (16) if_statement -> RANKED compare . THEN expression
    (17) if_statement -> RANKED compare . THEN print

    THEN            shift and go to state 30


state 22

    (18) compare -> expression . EQUALS expression
    (19) compare -> expression . NOTEQUALS expression
    (20) compare -> expression . BIGGER expression
    (21) compare -> expression . BIGGEROR expression
    (22) compare -> expression . SMALLER expression
    (23) compare -> expression . SMALLEROR expression
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    EQUALS          shift and go to state 31
    NOTEQUALS       shift and go to state 32
    BIGGER          shift and go to state 33
    BIGGEROR        shift and go to state 34
    SMALLER         shift and go to state 35
    SMALLEROR       shift and go to state 36
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 23

    (15) print -> PRINT LPAREN . expression RPAREN
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 37

state 24

    (11) expression -> expression TIMES expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    TIMES           reduce using rule 11 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 11 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 11 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 11 (expression -> expression TIMES expression .)
    $end            reduce using rule 11 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 11 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 11 (expression -> expression TIMES expression .)
    NOTEQUALS       reduce using rule 11 (expression -> expression TIMES expression .)
    BIGGER          reduce using rule 11 (expression -> expression TIMES expression .)
    BIGGEROR        reduce using rule 11 (expression -> expression TIMES expression .)
    SMALLER         reduce using rule 11 (expression -> expression TIMES expression .)
    SMALLEROR       reduce using rule 11 (expression -> expression TIMES expression .)
    THEN            reduce using rule 11 (expression -> expression TIMES expression .)

  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 25

    (12) expression -> expression DIVIDE expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    TIMES           reduce using rule 12 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 12 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 12 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 12 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 12 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 12 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 12 (expression -> expression DIVIDE expression .)
    NOTEQUALS       reduce using rule 12 (expression -> expression DIVIDE expression .)
    BIGGER          reduce using rule 12 (expression -> expression DIVIDE expression .)
    BIGGEROR        reduce using rule 12 (expression -> expression DIVIDE expression .)
    SMALLER         reduce using rule 12 (expression -> expression DIVIDE expression .)
    SMALLEROR       reduce using rule 12 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 12 (expression -> expression DIVIDE expression .)

  ! TIMES           [ shift and go to state 14 ]
  ! DIVIDE          [ shift and go to state 15 ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 26

    (13) expression -> expression PLUS expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    $end            reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 13 (expression -> expression PLUS expression .)
    NOTEQUALS       reduce using rule 13 (expression -> expression PLUS expression .)
    BIGGER          reduce using rule 13 (expression -> expression PLUS expression .)
    BIGGEROR        reduce using rule 13 (expression -> expression PLUS expression .)
    SMALLER         reduce using rule 13 (expression -> expression PLUS expression .)
    SMALLEROR       reduce using rule 13 (expression -> expression PLUS expression .)
    THEN            reduce using rule 13 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15

  ! TIMES           [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 27

    (14) expression -> expression MINUS expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    $end            reduce using rule 14 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 14 (expression -> expression MINUS expression .)
    NOTEQUALS       reduce using rule 14 (expression -> expression MINUS expression .)
    BIGGER          reduce using rule 14 (expression -> expression MINUS expression .)
    BIGGEROR        reduce using rule 14 (expression -> expression MINUS expression .)
    SMALLER         reduce using rule 14 (expression -> expression MINUS expression .)
    SMALLEROR       reduce using rule 14 (expression -> expression MINUS expression .)
    THEN            reduce using rule 14 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15

  ! TIMES           [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 28

    (5) result -> ID EQUAL expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    $end            reduce using rule 5 (result -> ID EQUAL expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 29

    (24) expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    BIGGER          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    BIGGEROR        reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    SMALLER         reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    SMALLEROR       reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 24 (expression -> LPAREN expression RPAREN .)


state 30

    (16) if_statement -> RANKED compare THEN . expression
    (17) if_statement -> RANKED compare THEN . print
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (15) print -> . PRINT LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11
    PRINT           shift and go to state 13

    expression                     shift and go to state 38
    print                          shift and go to state 39

state 31

    (18) compare -> expression EQUALS . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 40

state 32

    (19) compare -> expression NOTEQUALS . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 41

state 33

    (20) compare -> expression BIGGER . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 42

state 34

    (21) compare -> expression BIGGEROR . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 43

state 35

    (22) compare -> expression SMALLER . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 44

state 36

    (23) compare -> expression SMALLEROR . expression
    (6) expression -> . INT
    (7) expression -> . FLOAT
    (8) expression -> . NAME
    (9) expression -> . LNAME
    (10) expression -> . ID
    (11) expression -> . expression TIMES expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (24) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 9
    LNAME           shift and go to state 10
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 45

state 37

    (15) print -> PRINT LPAREN expression . RPAREN
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    RPAREN          shift and go to state 46
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 38

    (16) if_statement -> RANKED compare THEN expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    $end            reduce using rule 16 (if_statement -> RANKED compare THEN expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 39

    (17) if_statement -> RANKED compare THEN print .

    $end            reduce using rule 17 (if_statement -> RANKED compare THEN print .)


state 40

    (18) compare -> expression EQUALS expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 18 (compare -> expression EQUALS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 41

    (19) compare -> expression NOTEQUALS expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 19 (compare -> expression NOTEQUALS expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 42

    (20) compare -> expression BIGGER expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 20 (compare -> expression BIGGER expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 43

    (21) compare -> expression BIGGEROR expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 21 (compare -> expression BIGGEROR expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 44

    (22) compare -> expression SMALLER expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 22 (compare -> expression SMALLER expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 45

    (23) compare -> expression SMALLEROR expression .
    (11) expression -> expression . TIMES expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    THEN            reduce using rule 23 (compare -> expression SMALLEROR expression .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 46

    (15) print -> PRINT LPAREN expression RPAREN .

    $end            reduce using rule 15 (print -> PRINT LPAREN expression RPAREN .)

